import pickle

import torch
from torch.utils.data import Dataset

class DemonstrationDataset(Dataset):

    def __init__(self, observations, goals, actions):
        assert len(observations) == len(goals) == len(actions), \
            "Different amount of observations, goals, or actions."
        self.observations = observations
        self.goals = goals
        self.actions = actions

    @classmethod
    def from_baselines_rl_zoo(cls, path: str):
        """Constructs dataset from episodes generated by RL agents from 
            stable-baselines3. 
        """
        with open(path, "rb") as fp:
            trajectories = pickle.load(fp)
        obs, actions = zip(*trajectories)
        observations = [
                torch.squeeze(torch.from_numpy(o["observation"])) for o in obs]
        # Remove time wrapper feature.
        observations = [o[:-1] for o in observations]
        goals = [torch.squeeze(torch.from_numpy(o["desired_goal"])) for o in obs]
        actions = [torch.squeeze(torch.from_numpy(a)) for a in actions]
        return DemonstrationDataset(observations, goals, actions)
        
    def __len__(self):
        return len(self.observations)

    def __getitem__(self, idx):
        return self.observations[idx], self.actions[idx] 

    def get_context_dim(self):
        # TODO: Add goal to context.
        return self.observations.shape[0]

    def get_action_dim(self):
        return self.actions.shape[0]

