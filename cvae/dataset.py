from argparse import ArgumentParser
import pickle
from typing import Iterable, Tuple

import torch
from torch.utils.data import Dataset

class DemonstrationDataset(Dataset):

    def __init__(self, 
            observations: Iterable[torch.Tensor], 
            goals: Iterable[torch.Tensor], 
            actions: Iterable[torch.Tensor], 
            include_goal: bool):
        assert len(observations) == len(goals) == len(actions), \
            "Different amount of observations, goals, or actions."
        if include_goal:
            self.contexts = [torch.cat(c) for c in zip(observations, goals)]
        else:
            self.contexts = observations
        
        self.actions = actions

    @classmethod
    def from_baselines_rl_zoo(cls, path: str, include_goal: bool):
        """Constructs dataset from episodes generated by RL agents from 
            stable-baselines3. 
        """
        with open(path, "rb") as fp:
            trajectories = pickle.load(fp)
        obs, actions = zip(*trajectories)
        observations = [
                torch.squeeze(torch.from_numpy(o["observation"])) for o in obs]
        # Remove time wrapper feature.
        observations = [o[:-1] for o in observations]
        goals = [torch.squeeze(torch.from_numpy(o["desired_goal"])) for o in obs]
        actions = [torch.squeeze(torch.from_numpy(a)) for a in actions]
        return DemonstrationDataset(observations, goals, actions, include_goal)
        
    def __len__(self) -> int:
        return len(self.contexts)

    def __getitem__(self, idx: int) -> Tuple[torch.Tensor, torch.Tensor]:
        return self.contexts[idx], self.actions[idx] 

    def get_context_dim(self) -> int:
        return self.contexts[0].shape[0]

    def get_action_dim(self) -> int:
        return self.actions[0].shape[0]

    @staticmethod
    def add_dataset_specific_args(parent_parser):
        parser = ArgumentParser(parents=[parent_parser], add_help=False)
        parser.add_argument("--include_goal", type=bool, default=False)
        return parser
